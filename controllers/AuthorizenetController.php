<?php
/**
 * Created by PhpStorm.
 * User: apple
 * Date: 2017/7/28
 * Time: 12:43
 */
namespace app\controllers;

use yii\web\Controller;

use net\authorize\api\contract\v1 as AnetAPI;
use net\authorize\api\controller as AnetController;
use net\authorize\api\contract\v1\CustomerPaymentProfileMaskedType;
use yii\web\UrlManager;

/**
 * CollectDataCopyController implements the CRUD actions for CollectDataCopy model.
 */
class AuthorizenetController extends Controller{

    public $merchantAuthentication;

    public function beforeAction($action)
    {
        $this->merchantAuthentication = new AnetAPI\MerchantAuthenticationType();
        $this->merchantAuthentication->setName('3ceL67Gjg');
        $this->merchantAuthentication->setTransactionKey('7Q6KD842c56h66vw');
        return parent::beforeAction($action); // TODO: Change the autogenerated stub
    }

    public $enableCsrfValidation = false;

    /**
     * @return string
     * authorizeNet 案列请求token使用的xml
     * <?xml version="1.0" encoding="utf-8"?>
        <getHostedProfilePageRequest xmlns="AnetApi/xml/v1/schema/AnetApiSchema.xsd">
        <merchantAuthentication><name>3ceL67Gjg</name><transactionKey>7Q6KD842c56h66vw</transactionKey></merchantAuthentication>
        <customerProfileId>1810025774</customerProfileId>
        <hostedProfileSettings>
        <setting>
            <settingName>hostedProfileReturnUrl</settingName>
            <settingValue>https://local.pci.com:443/return.html</settingValue>
        </setting>
        <setting>
            <settingName>hostedProfileIFrameCommunicatorUrl</settingName>
            <settingValue>https://local.pci.com:443/iCommunicator.html</settingValue>
            </setting>
        <setting>
            <settingName>hostedProfileReturnUrlText</settingName>
            <settingValue>Back to Confirmation Page</settingValue>
            </setting>
        <setting>
            <settingName>hostedProfilePageBorderVisible</settingName>
            <settingValue>false</settingValue>
            </setting>
        <setting>
            <settingName>hostedProfileBillingAddressOptions</settingName>
            <settingValue>showBillingAddress</settingValue>
            </setting>
        <!--<setting><settingName>hostedProfileManageOptions</settingName><settingValue>showPayment</settingValue></setting> -->
        </hostedProfileSettings>
        </getHostedProfilePageRequest>
     */
    public function actionIndex(){
        $profileId = \Yii::$app->request->get('profileId');
        $setting = new AnetAPI\SettingType();
        $setting->setSettingName("hostedProfileIFrameCommunicatorUrl");
        $url = \Yii::$app->urlManager->createAbsoluteUrl(['authorizenet/special']);
        $setting->setSettingValue($url);
        $request = new AnetAPI\GetHostedProfilePageRequest();
        $request->setMerchantAuthentication($this->merchantAuthentication);
        $request->setCustomerProfileId($profileId);
        $request->addToHostedProfileSettings($setting);
        $controller = new AnetController\GetHostedProfilePageController($request);
        $response = $controller->executeWithApiResponse( \net\authorize\api\constants\ANetEnvironment::SANDBOX);
        if (($response != null) && ($response->getMessages()->getResultCode() == "Ok") )
        {
           $token =  $response->getToken();
        }else $token = '';
        return $this->render('index',['token'=>$token]);
    }

    public function actionPayment(){
        $token = $this->getAnAcceptPaymentPage();
        return $this->render('payment',['token'=>$token]);
    }

    public function actionSignup(){
        $post = \Yii::$app->request->post();
        if(!empty($post['email'])){
            $customerProfile = new AnetAPI\CustomerProfileType();
            $customerProfile->setDescription("Customer 2 Test PHP");
            $customerProfile->setMerchantCustomerId('11211');
            $customerProfile->setEmail($post['email']);
            $request = new AnetAPI\CreateCustomerProfileRequest();
            $request->setMerchantAuthentication($this->merchantAuthentication);
            $request->setProfile($customerProfile);
            $controller = new AnetController\CreateCustomerProfileController($request);
            $response = $controller->executeWithApiResponse(\net\authorize\api\constants\ANetEnvironment::SANDBOX);
            if (($response != null) && ($response->getMessages()->getResultCode() == "Ok")) {
                $profileId = $response->getCustomerProfileId();
                \Yii::$app->session->set('user_id','11211');
                \Yii::$app->session->set('profileId',$profileId);
                \Yii::$app->session->set('email',$post['email']);
                $this->redirect(['authorizenet/index','profileId'=>$profileId]);
            }
        }
        return $this->render('signup');
    }

    /**
     * 获取托管表单所需的token
     * @return mixed
     */
    function getAnAcceptPaymentPage()
    {
        $transactionRequestType = new AnetAPI\TransactionRequestType();
        $transactionRequestType->setTransactionType("authCaptureTransaction");
        $transactionRequestType->setAmount("12.23");
        $customer = $this->getCustomerProfile(\Yii::$app->session->get('profileId'));
        $billTo = end($customer->getProfile()->getPaymentProfiles())->getBillTo();

        $transactionRequestType->setBillTo($billTo);
        $customer = new AnetAPI\CustomerDataType();
        $customer->setEmail(\Yii::$app->session->get('email'));
        $customer->setId(\Yii::$app->session->get('user_id'));
        $transactionRequestType->setCustomer($customer);

        $request = new AnetAPI\GetHostedPaymentPageRequest();
        $request->setMerchantAuthentication($this->merchantAuthentication);
        $request->setTransactionRequest($transactionRequestType);
        $setting3 = new AnetAPI\SettingType();
        $setting3->setSettingName("hostedPaymentReturnOptions");
        $setting3->setSettingValue("{\"url\": \"https://www.basic.com/index.php?r=authorizenet/receipt\", \"cancelUrl\": \"https://www.basic.com/index.php?r=authorizenet/cancel\", \"showReceipt\": false}");
        $request->addToHostedPaymentSettings($setting3);

        //设置托管表单显示email，且必填 （因为form表单没有禁止修改email参数，所以可以设置email但不显示在表单中，以防修改）
        $setting4 = new AnetAPI\SettingType();
        $setting4->setSettingName('hostedPaymentCustomerOptions');
        $setting4->setSettingValue("{\"showEmail\": true, \"requiredEmail\":true}");
        $request->addToHostedPaymentSettings($setting4);

        $setting5 = new AnetAPI\SettingType();
        $setting5->setSettingName('hostedPaymentOrderOptions');
        $setting5->setSettingValue("{\"show\": false, \"merchantName\": \"TwoBrightLights\"}");
        $request->addToHostedPaymentSettings($setting5);

        $setting6 = new AnetAPI\SettingType();
        $setting6->setSettingName('hostedPaymentIFrameCommunicatorUrl');
        $url = \Yii::$app->urlManager->createAbsoluteUrl(['authorizenet/special']);
        $setting6->setSettingValue("{\"url\": \"".$url."\"}");
        $request->addToHostedPaymentSettings($setting6);
        $controller = new AnetController\GetHostedPaymentPageController($request);
        $response = $controller->executeWithApiResponse( \net\authorize\api\constants\ANetEnvironment::SANDBOX);

        if (($response != null) && ($response->getMessages()->getResultCode() == "Ok") ) {
           return $response->getToken();
        }
    }

    public function actionCancel(){
        echo "<pre>";
        var_dump($_POST,$_GET);
    }

    public function actionSpecial()
    {
        return $this->render('special');
    }

    public function actionRedirect(){
        echo "<pre>";
        var_dump($_POST,$_GET);die;
    }

    public function actionReceipt(){
        echo "<pre>";
        var_dump($_POST,$_GET);
        $this->redirect(['/authorizenet/redirect']);die;
    }


    /**
     * 获取paymentProfilesID
     * @param int $profileID
     * @return mixed
     */
    function getCustomerProfile($profileID = 1810263952)
    {
        $request = new AnetAPI\GetCustomerProfileRequest();
        $request->setMerchantAuthentication($this->merchantAuthentication);
        $request->setCustomerProfileId($profileID);
        $controller = new AnetController\GetCustomerProfileController($request);
        $response = $controller->executeWithApiResponse( \net\authorize\api\constants\ANetEnvironment::SANDBOX);
        if (($response != null) && ($response->getMessages()->getResultCode() == "Ok") )
        {
            return $response;
            $profileSelected = $response->getProfile();
            $paymentProfilesSelected = $profileSelected->getPaymentProfiles();
            $paymentProfilesID = $paymentProfilesSelected[0]->getCustomerPaymentProfileId();
            return $paymentProfilesID;
        }
    }


    public function actionReturn(){
        echo 111;
    }

    public function actionPaymentprocessor(){
        echo 111;
    }
}


